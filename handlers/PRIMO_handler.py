# -*- coding: utf-8 -*-
import asyncio
import json
import os
from collections import defaultdict

from aiogram import F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.types import InputMediaPhoto
from aiogram.types import InputMediaVideo  # –î–æ–±–∞–≤—å –≤ –∏–º–ø–æ—Ä—Ç—ã
from loguru import logger

from dispatcher import router, bot, ID_GROUP
from keyboards.keyboards import (selection_size_table_keyboard, TABLE_SIZES_NOX, selection_colour_keyboard, COLOURS,
                                 keyboard_start_menu, keyboard_confirm_or_cancel_primo, admin_keyboard)
from messages.messages import size_selection_text, review_prompt_text, table_color_prompt_text, media_upload_prompt
from states.states import StatesPrimo
from utils.media import process_single_photo, process_single_video

# –°–ª–æ–≤–∞—Ä—å –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–ª—å–±–æ–º–æ–≤
album_buffer = defaultdict(list)  # media_group_id -> List[Message]
published_media_cache = {}


# 1. –í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞
@router.callback_query(F.data == "arbo_primo_table")
async def handle_primo_table_selection(callback: CallbackQuery, state: FSMContext):
    """
    üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°—Ç–æ–ª ARBO PRIMO".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç–æ–ª–∞.
    """
    await callback.message.edit_text(size_selection_text, reply_markup=selection_size_table_keyboard())
    logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–°—Ç–æ–ª ARBO PRIMO'")
    await state.set_state(StatesPrimo.size_primo)


# 2. –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ (–ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞)
@router.callback_query(StateFilter(StatesPrimo.size_primo), F.data.in_(TABLE_SIZES_NOX.keys()))
async def handle_primo_size_selected(callback: CallbackQuery, state: FSMContext):
    """
    ‚úçÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–∞–∑–º–µ—Ä —Å—Ç–æ–ª–∞.
    –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ü–≤–µ—Ç–∞.
    """
    size_key = callback.data
    size_value = TABLE_SIZES_NOX.get(size_key)
    await state.update_data(size=size_value)  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª—é—á "size"
    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–∞–∑–º–µ—Ä {size_value}")
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.delete()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ü–≤–µ—Ç–∞
    msg = await callback.message.answer(table_color_prompt_text, reply_markup=selection_colour_keyboard())
    await state.update_data(last_bot_message_id=msg.message_id)
    await state.set_state(StatesPrimo.colour_primo)


# 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ (–ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞)
@router.callback_query(StateFilter(StatesPrimo.colour_primo), F.data.in_(COLOURS.keys()))
async def select_colour_primo(callback_query: CallbackQuery, state: FSMContext):
    """
    üé® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ü–≤–µ—Ç.
    –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–≤–µ—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞.
    """
    colour_key = callback_query.data
    colour_value = COLOURS.get(colour_key)
    await state.update_data(colour=colour_value)  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª—é—á "colour"
    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ü–≤–µ—Ç {colour_value}")
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ü–≤–µ—Ç–∞
    await callback_query.message.delete()
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
    msg = await callback_query.message.answer(review_prompt_text, reply_markup=keyboard_start_menu())
    await state.update_data(last_bot_message_id=msg.message_id)
    await state.set_state(StatesPrimo.feedback_primo)


# 4. –ü—Ä–∏–µ–º —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ (–ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞)
@router.message(StateFilter(StatesPrimo.feedback_primo))
async def handle_feedback_text_received_primo(message: Message, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–∑—ã–≤ –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ.
    """
    await state.update_data(feedback=message.text.strip())  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª—é—á "feedback"
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()
    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–∑—ã–≤ {message.text.strip()}")
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ (üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ üëá)
    data = await state.get_data()
    last_bot_message_id = data.get("last_bot_message_id")
    if last_bot_message_id:
        await message.bot.delete_message(chat_id=message.chat.id, message_id=last_bot_message_id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞
    msg = await message.answer(media_upload_prompt, reply_markup=keyboard_start_menu())
    await state.update_data(last_bot_message_id=msg.message_id)
    await state.set_state(StatesPrimo.photo_video_primo)


# 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ
@router.message(StateFilter(StatesPrimo.photo_video_primo), F.photo | F.video)
async def handle_media_group_primo(message: Message, state: FSMContext):
    data = await state.get_data()
    # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª—é—á–∏
    feedback_text = data.get("feedback")  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á
    table_size = data.get("size")  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á
    colour = data.get("colour")  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á
    text = (
        f"üì¶ –°—Ç–æ–ª: ARBO PRIMO\n"
        f"üìè –†–∞–∑–º–µ—Ä: {table_size}\n"
        f"üé® –¶–≤–µ—Ç: {colour}\n"
        f"‚úçÔ∏è –û—Ç–∑—ã–≤: {feedback_text}\n"
    )
    # –ï—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å –∞–ª—å–±–æ–º–∞
    if message.media_group_id:
        album_buffer[message.media_group_id].append(message)
        await asyncio.sleep(1.5)
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ...")
        last_bot_message_id = data.get("last_bot_message_id")
        if last_bot_message_id:
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=last_bot_message_id)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")
        album = album_buffer[message.media_group_id]
        if album and album[-1].message_id == message.message_id:
            messages = album_buffer.pop(message.media_group_id)
            logger.info(f"üì∏üé• –ü–æ–ª—É—á–µ–Ω –∞–ª—å–±–æ–º ({len(messages)} –º–µ–¥–∏–∞) –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            photo_ids = []
            video_ids = []
            for msg in messages:
                await msg.delete()
                if msg.photo:
                    photo_ids.append(msg.photo[-1].file_id)
                elif msg.video:
                    video_ids.append(msg.video.file_id)
            await state.update_data(photo_ids=photo_ids, video_ids=video_ids, photo_response_sent=True)
            media_group = []
            for idx, pid in enumerate(photo_ids):
                media_group.append(InputMediaPhoto(media=pid, caption=text if idx == 0 else None))
            for idx, vid in enumerate(video_ids):
                media_group.append(
                    InputMediaVideo(media=vid, caption=text if not photo_ids and idx == 0 else None))
            if media_group:
                media_msgs = await message.answer_media_group(media_group)
                if media_msgs:
                    preview_ids = [msg.message_id for msg in media_msgs]
                    await state.update_data(preview_message_ids=preview_ids)
            confirm_msg = await message.answer("üîé –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–∑—ã–≤ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π. –í—Å—ë –≤–µ—Ä–Ω–æ?",
                                               reply_markup=keyboard_confirm_or_cancel_primo())
            await state.update_data(last_bot_message_id=confirm_msg.message_id)
    else:
        preview_ids = []

        if message.photo:
            preview_ids = await process_single_photo(message, state, data, text)
        elif message.video:
            preview_ids = await process_single_video(message, state, data, text)
        else:
            await message.answer(text)
        await state.update_data(preview_message_ids=preview_ids)
        confirm_msg = await message.answer("üîé –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–∑—ã–≤ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π. –í—Å—ë –≤–µ—Ä–Ω–æ?",
                                           reply_markup=keyboard_confirm_or_cancel_primo())
        await state.update_data(last_bot_message_id=confirm_msg.message_id)


@router.callback_query(F.data == "confirm_review_primo")
async def handle_review_confirmation_primo(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª—é—á–∏
    table_size = data.get("size")  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á
    colour = data.get("colour")  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á
    feedback_text = data.get("feedback", "")  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á
    photo_ids = data.get("photo_ids", [])
    video_ids = data.get("video_ids", [])
    logger.success(f"‚úÖ [{callback.from_user.id}] –û—Ç–∑—ã–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –æ—Ç–∑—ã–≤–∞ (–º–µ–¥–∏–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç)
    preview_ids = data.get("preview_message_ids", [])
    for mid in preview_ids:
        try:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=mid)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞ id={mid}: {e}")
    await send_review_to_user_and_admin_primo(
        user=callback.from_user,  # –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message=callback.message,
        table_size=table_size,
        colour=colour,  # –¶–≤–µ—Ç —Å—Ç–æ–ª–∞
        feedback_text=feedback_text,
        photo_ids=photo_ids,
        video_ids=video_ids,
        target_chat_id=ID_GROUP
    )
    await callback.message.answer("üéâ –°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é üëÄ", reply_markup=keyboard_start_menu())
    await state.clear()


# üì∏ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞
async def send_review_to_user_and_admin_primo(user, message, table_size, colour, feedback_text, photo_ids,
                                              video_ids=None,
                                              target_chat_id=None):
    chat_id = target_chat_id or message.chat.id  # –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω, —à–ª—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    # --- –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ---
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: username > –ò–º—è –§–∞–º–∏–ª–∏—è > –ò–º—è > ID
    user_info_parts = []
    if user.first_name:
        user_info_parts.append(user.first_name)
    if user.last_name:
        user_info_parts.append(user.last_name)

    full_name = " ".join(user_info_parts).strip() if user_info_parts else ""

    if user.username:
        # –ï—Å–ª–∏ –µ—Å—Ç—å username, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ —Å @
        user_display = f"@{user.username}"
    elif full_name:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–º—è/—Ñ–∞–º–∏–ª–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
        user_display = full_name
    else:
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ID
        user_display = f"ID: {user.id}"

    text = (
        f"üì© –û—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display}!\n"
        f"üì¶ –°—Ç–æ–ª: ARBO PRIMO\n"
        f"üìè –†–∞–∑–º–µ—Ä —Å—Ç–æ–ª–∞: {table_size}\n"
        f"üé® –¶–≤–µ—Ç —Å—Ç–æ–ª–∞: {colour}\n"  # –î–æ–±–∞–≤–∏–ª–∏ —Ü–≤–µ—Ç
        f"‚úçÔ∏è –û—Ç–∑—ã–≤: {feedback_text}"
    )
    # 1. –°–æ–±–∏—Ä–∞–µ–º –æ–±—â–∏–π –∞–ª—å–±–æ–º
    media_group = []
    if photo_ids:
        for idx, pid in enumerate(photo_ids):
            media_group.append(InputMediaPhoto(media=pid, caption=text if idx == 0 else None))
    if video_ids:
        for idx, vid in enumerate(video_ids):
            media_group.append(InputMediaVideo(media=vid, caption=text if not photo_ids and idx == 0 else None))
    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞)
    if media_group:
        media_group = media_group[:10]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
        sent_messages = await bot.send_media_group(chat_id=chat_id, media=media_group)
        first_message_id = sent_messages[0].message_id  # <-- –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        os.makedirs("pending_reviews", exist_ok=True)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞ –ø–æ ID –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        json_path = os.path.join("pending_reviews", f"{first_message_id}.json")
        with open(json_path, "w", encoding="utf-8") as f:
            json.dump({
                "photos": photo_ids,
                "videos": video_ids,
                "text": text,
                "user_id": user.id
            }, f, ensure_ascii=False, indent=2)
        # 3. –ù–∞–≤–µ—à–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∞–ª—å–±–æ–º–∞
        await bot.send_message(
            chat_id=chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_to_message_id=first_message_id,  # <-- reply –Ω–∞ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            reply_markup=admin_keyboard()
        )
    # 4. –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    else:
        sent_message = await bot.send_message(chat_id=chat_id, text=text)  # <-- –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_id_to_reply = sent_message.message_id  # <-- –ü–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
        os.makedirs("pending_reviews", exist_ok=True)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞ –ø–æ ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        json_path = os.path.join("pending_reviews", f"{message_id_to_reply}.json")
        with open(json_path, "w", encoding="utf-8") as f:
            json.dump({
                "photos": photo_ids,
                "videos": video_ids,
                "text": text,
                "user_id": user.id
            }, f, ensure_ascii=False, indent=2)
        await bot.send_message(
            chat_id=chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_to_message_id=message_id_to_reply,  # <-- reply –Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            reply_markup=admin_keyboard()
        )


def register_PRIMO_handlers():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    router.callback_query.register(handle_primo_table_selection)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    router.callback_query.register(handle_primo_size_selected)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    router.callback_query.register(select_colour_primo)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    router.message.register(handle_feedback_text_received_primo)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    router.message.register(handle_media_group_primo)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    router.callback_query.register(handle_review_confirmation_primo)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
