# -*- coding: utf-8 -*-
from aiogram import F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from loguru import logger

from dispatcher import router, bot
from keyboards.NOX_keyboards import (selection_size_arbo_primo_table_keyboard_nox, leave_review_nox_keyboard,
                                     TABLE_SIZES_NOX)
from messages.messages import size_selection_text
from models.models import Review
from states.states import States


@router.callback_query(F.data == "the_nox_table")
async def the_nox_table(callback_query: CallbackQuery, state: FSMContext):
    """
    üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "ARBO PRIMO".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç–æ–ª–∞.
    """
    await bot.send_message(
        callback_query.from_user.id,
        size_selection_text,
        reply_markup=selection_size_arbo_primo_table_keyboard_nox()
    )
    await state.set_state(States.size)


@router.callback_query(StateFilter(States.size), F.data.in_(TABLE_SIZES_NOX.keys()))
async def select_size_nox(callback_query: CallbackQuery, state: FSMContext):
    """
    üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç–æ–ª–∞.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤.
    """
    selected_size = callback_query.data
    readable = TABLE_SIZES_NOX[selected_size]  # selected_size ‚Äî —ç—Ç–æ –∫–ª—é—á
    await state.update_data(size=selected_size)

    logger.info(f"üü¢ [{callback_query.from_user.id}] –í—ã–±—Ä–∞–Ω —Ä–∞–∑–º–µ—Ä: {readable}")

    await bot.send_message(
        callback_query.from_user.id,
        "‚úçÔ∏è –•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤?",
        reply_markup=leave_review_nox_keyboard()
    )
    await state.set_state(States.feedback)


@router.callback_query(StateFilter(States.feedback), F.data == "leave_review_nox")
async def leave_review_nox(callback_query: CallbackQuery, state: FSMContext):
    """
    ‚úçÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤".
    –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞.
    """
    await state.update_data(feedback="yes")

    logger.info(f"üü° [{callback_query.from_user.id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")

    await bot.send_message(
        callback_query.from_user.id,
        "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ üëá"
    )
    await state.set_state(States.sending)


@router.message(StateFilter(States.sending))
async def send_review_nox(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å".
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å.
    """
    data = await state.get_data()
    user_id = message.from_user.id
    table_size = data.get("size", "unknown")
    readable = TABLE_SIZES_NOX[table_size]  # selected_size ‚Äî —ç—Ç–æ –∫–ª—é—á
    feedback_status = data.get("feedback", "no")
    feedback_text = message.text.strip()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    Review.create(
        user_id=user_id,
        table_size=readable,
        feedback_status=feedback_status,
        feedback_text=feedback_text
    )

    logger.success(f"‚úÖ [{user_id}] –û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: size={readable}, text={feedback_text}")

    await message.answer("üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω üôå")
    await state.clear()


def register_NOX_handlers():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    router.callback_query.register(the_nox_table)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    router.callback_query.register(select_size_nox)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    router.callback_query.register(leave_review_nox)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    router.callback_query.register(send_review_nox)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
