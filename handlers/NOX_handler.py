# -*- coding: utf-8 -*-
from aiogram import F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from loguru import logger

from dispatcher import router, bot
from keyboards.NOX_keyboards import (selection_size_arbo_primo_table_keyboard_nox, TABLE_SIZES_NOX, keyboard_start_menu,
                                     keyboard_video_handler)
from messages.messages import size_selection_text
from models.models import Review
from states.states import States

ADMIN_ID = 535185511  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞


@router.callback_query(F.data == "the_nox_table")
async def the_nox_table(callback_query: CallbackQuery, state: FSMContext):
    """
    üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "ARBO PRIMO".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç–æ–ª–∞.
    """
    response_message = callback_query.message
    await response_message.edit_text(
        size_selection_text,
        reply_markup=selection_size_arbo_primo_table_keyboard_nox()
    )
    await state.set_state(States.size)


@router.callback_query(StateFilter(States.size), F.data.in_(TABLE_SIZES_NOX.keys()))
async def select_size_nox(callback_query: CallbackQuery, state: FSMContext):
    """
    ‚úçÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤".
    –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞.
    """
    response_message = callback_query.message
    selected_size = callback_query.data
    readable = TABLE_SIZES_NOX[selected_size]  # selected_size ‚Äî —ç—Ç–æ –∫–ª—é—á
    await state.update_data(size=selected_size)
    logger.info(f"üü¢ [{callback_query.from_user.id}] –í—ã–±—Ä–∞–Ω —Ä–∞–∑–º–µ—Ä: {readable}")
    # logger.info(f"üü° [{callback_query.from_user.id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")

    await response_message.edit_text(
        "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ üëá", reply_markup=keyboard_start_menu()
    )
    await state.set_state(States.photo)


@router.message(StateFilter(States.photo))
async def send_photo_handler(message: Message, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–∑—ã–≤ –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ.
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
    feedback_text = message.text.strip()
    await state.update_data(feedback=feedback_text)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞
    await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 10 —à—Ç—É–∫",
        reply_markup=keyboard_start_menu()
    )

    await state.set_state(States.video)


@router.message(StateFilter(States.video))
async def send_video_handler(message: Message, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ç–æ –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ.
    """
    try:
        await message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ: {e}")

    await message.answer(
        "üé• –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 1 —à—Ç—É–∫–∏",
        reply_markup=keyboard_video_handler()
    )

    await state.set_state(States.sending)


@router.callback_query(F.data == "skip_step")
async def skip_step(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = callback_query.from_user.id
    table_size = data.get("size", "unknown")
    readable = TABLE_SIZES_NOX.get(table_size, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä")
    feedback_text = data.get("feedback", "‚õî –û—Ç–∑—ã–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    Review.create(
        user_id=user_id,
        table_size=readable,
        feedback_status="skipped_video",  # —É–∫–∞–∂–∏ —è–≤–Ω–æ —Å—Ç–∞—Ç—É—Å
        feedback_text=feedback_text
    )

    logger.success(f"‚úÖ [{user_id}] –û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω (–±–µ–∑ –≤–∏–¥–µ–æ): size={readable}, text={feedback_text}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    admin_text = (
        f"üì• <b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ (–±–µ–∑ –≤–∏–¥–µ–æ)</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code>\n"
        f"üìè –†–∞–∑–º–µ—Ä —Å—Ç–æ–ª–∞: {readable}\n"
        f"üí¨ –û—Ç–∑—ã–≤:\n{feedback_text}"
    )
    await bot.send_message(chat_id=ADMIN_ID, text=admin_text, parse_mode="HTML")

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.edit_text("üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω üôå")
    await state.clear()


@router.message(StateFilter(States.sending))
async def send_review_nox(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å".
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å.
    """
    data = await state.get_data()
    user_id = message.from_user.id
    table_size = data.get("size", "unknown")
    readable = TABLE_SIZES_NOX.get(table_size, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä")
    feedback_status = data.get("feedback", "no")
    feedback_text = message.text.strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    Review.create(
        user_id=user_id,
        table_size=readable,
        feedback_status=feedback_status,
        feedback_text=feedback_text
    )

    logger.success(f"‚úÖ [{user_id}] –û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: size={readable}, text={feedback_text}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    admin_text = (
        f"üì• <b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code>\n"
        f"üìè –†–∞–∑–º–µ—Ä —Å—Ç–æ–ª–∞: {readable}\n"
        f"üí¨ –û—Ç–∑—ã–≤:\n{feedback_text}"
    )
    await bot.send_message(chat_id=ADMIN_ID, text=admin_text, parse_mode="HTML")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer("üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω üôå")
    await state.clear()


def register_NOX_handlers():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    router.callback_query.register(the_nox_table)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    router.callback_query.register(select_size_nox)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    router.callback_query.register(send_review_nox)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
