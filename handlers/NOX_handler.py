# -*- coding: utf-8 -*-
import asyncio
from collections import defaultdict

from aiogram import F
from aiogram import types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from loguru import logger

from dispatcher import router, bot, ADMIN_ID
from keyboards.NOX_keyboards import (selection_size_arbo_primo_table_keyboard_nox, TABLE_SIZES_NOX, keyboard_start_menu,
                                     keyboard_video_handler)
from keyboards.admin_keyboards import admin_keyboard
from messages.messages import size_selection_text
from models.models import Review
from states.states import States


@router.callback_query(F.data == "the_nox_table")
async def handle_nox_table_selection(callback_query: CallbackQuery, state: FSMContext):
    """
    üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "ARBO PRIMO".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç–æ–ª–∞.
    """
    response_message = callback_query.message
    await response_message.edit_text(
        size_selection_text,
        reply_markup=selection_size_arbo_primo_table_keyboard_nox()
    )
    await state.set_state(States.size)


@router.callback_query(StateFilter(States.size), F.data.in_(TABLE_SIZES_NOX.keys()))
async def handle_nox_size_selected(callback_query: CallbackQuery, state: FSMContext):
    """
    ‚úçÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤".
    –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞.
    """
    response_message = callback_query.message
    selected_size = callback_query.data
    readable = TABLE_SIZES_NOX[selected_size]  # selected_size ‚Äî —ç—Ç–æ –∫–ª—é—á
    await state.update_data(size=selected_size)
    logger.info(f"üü¢ [{callback_query.from_user.id}] –í—ã–±—Ä–∞–Ω —Ä–∞–∑–º–µ—Ä: {readable}")
    # logger.info(f"üü° [{callback_query.from_user.id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
    msg = await response_message.edit_text(
        "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ üëá", reply_markup=keyboard_start_menu()
    )
    await state.update_data(last_bot_message_id=msg.message_id)
    await state.set_state(States.photo)


@router.message(StateFilter(States.photo))
async def handle_feedback_text_received(message: Message, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–∑—ã–≤ –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ.
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
    response_message = message
    feedback_text = message.text.strip()
    await state.update_data(feedback=feedback_text)
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    last_bot_message_id = data.get("last_bot_message_id")
    if last_bot_message_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=last_bot_message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞
    msg = await response_message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 10 —à—Ç—É–∫",
        reply_markup=keyboard_start_menu()
    )
    await state.update_data(last_bot_message_id=msg.message_id)
    await state.set_state(States.video)


# –°–ª–æ–≤–∞—Ä—å –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–ª—å–±–æ–º–æ–≤
album_buffer = defaultdict(list)


@router.message(StateFilter(States.video), F.photo)
async def handle_photo_or_album(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Ñ–æ—Ç–æ, —Ç–∞–∫ –∏ –∞–ª—å–±–æ–º—ã (media_group_id).
    """
    if message.media_group_id:
        # –≠—Ç–æ –∞–ª—å–±–æ–º ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä
        media_group_id = message.media_group_id
        album_buffer[media_group_id].append(message)
        await asyncio.sleep(1.5)
        if len(album_buffer[media_group_id]) > 0 and album_buffer[media_group_id][-1].message_id == message.message_id:
            messages = album_buffer.pop(media_group_id)
            logger.info(f"üì∏ –ü–æ–ª—É—á–µ–Ω –∞–ª—å–±–æ–º –∏–∑ {len(messages)} —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            for msg in messages:
                try:
                    await msg.delete()
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞: {e}")
            await proceed_after_photos(message, state)
    else:
        # –≠—Ç–æ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ
        logger.info(f"üì∏ –ü–æ–ª—É—á–µ–Ω–æ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        try:
            await message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ: {e}")
        await proceed_after_photos(message, state)


async def proceed_after_photos(message: Message, state: FSMContext):
    data = await state.get_data()
    if data.get("photo_response_sent"):
        return
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    last_bot_message_id = data.get("last_bot_message_id")
    if last_bot_message_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=last_bot_message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")
    msg = await message.answer(
        "üé• –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 1 —à—Ç—É–∫–∏",
        reply_markup=keyboard_video_handler()
    )
    await state.update_data(
        last_bot_message_id=msg.message_id,
        photo_response_sent=True
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    photo_id = message.photo[-1].file_id  # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    photo_list = data.get("photo_ids", [])
    photo_list.append(photo_id)
    await state.update_data(photo_ids=photo_list)
    await state.set_state(States.sending)


@router.callback_query(F.data == "skip_step")
async def handle_skip_video_step(callback_query: CallbackQuery, state: FSMContext):
    response_message = callback_query.message
    data = await state.get_data()
    user_id = callback_query.from_user.id
    table_size = data.get("size", "unknown")
    readable = TABLE_SIZES_NOX.get(table_size, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä")
    feedback_text = data.get("feedback", "‚õî –û—Ç–∑—ã–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    Review.create(
        user_id=user_id,
        table_size=readable,
        feedback_status="skipped_video",  # —É–∫–∞–∂–∏ —è–≤–Ω–æ —Å—Ç–∞—Ç—É—Å
        feedback_text=feedback_text
    )
    logger.success(f"‚úÖ [{user_id}] –û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω (–±–µ–∑ –≤–∏–¥–µ–æ): size={readable}, text={feedback_text}")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    admin_text = (
        f"üì• <b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ (–±–µ–∑ –≤–∏–¥–µ–æ)</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code>\n"
        f"üìè –†–∞–∑–º–µ—Ä —Å—Ç–æ–ª–∞: {readable}\n"
        f"üí¨ –û—Ç–∑—ã–≤:\n{feedback_text}"
    )
    await bot.send_message(chat_id=ADMIN_ID, text=admin_text, parse_mode="HTML", reply_markup=admin_keyboard())
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    photo_ids = data.get("photo_ids", [])
    video_id = data.get("video_id")
    feedback_text = data.get("feedback", "")
    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await response_message.edit_text("üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω üôå",
                                     reply_markup=admin_keyboard())
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if photo_ids:
        media = [types.InputMediaPhoto(media=pid) for pid in photo_ids]
        if len(media) == 1:
            await response_message.answer_photo(media[0].media, caption=feedback_text)
        else:
            media[0].caption = feedback_text  # –¥–æ–±–∞–≤–∏–º –ø–æ–¥–ø–∏—Å—å –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–æ—Ç–æ
            await response_message.answer_media_group(media)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if video_id and not photo_ids:
        await response_message.answer_video(video_id, caption=feedback_text)
    await state.clear()


@router.message(StateFilter(States.sending))
async def handle_final_review_submission(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å".
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å.
    """
    response_message = message
    data = await state.get_data()
    user_id = message.from_user.id
    table_size = data.get("size", "unknown")
    readable = TABLE_SIZES_NOX.get(table_size, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä")
    feedback_status = data.get("feedback", "no")
    feedback_text = message.text.strip()
    video_id = message.video.file_id
    await state.update_data(video_id=video_id)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    Review.create(
        user_id=user_id,
        table_size=readable,
        feedback_status=feedback_status,
        feedback_text=feedback_text
    )
    logger.success(f"‚úÖ [{user_id}] –û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: size={readable}, text={feedback_text}")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    admin_text = (
        f"üì• <b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code>\n"
        f"üìè –†–∞–∑–º–µ—Ä —Å—Ç–æ–ª–∞: {readable}\n"
        f"üí¨ –û—Ç–∑—ã–≤:\n{feedback_text}"
    )
    await bot.send_message(chat_id=ADMIN_ID, text=admin_text, parse_mode="HTML", reply_markup=admin_keyboard())
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    photo_ids = data.get("photo_ids", [])
    video_id = data.get("video_id")
    feedback_text = data.get("feedback", "")
    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await response_message.answer("üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω üôå",
                                  reply_markup=admin_keyboard())
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if photo_ids:
        media = [types.InputMediaPhoto(media=pid) for pid in photo_ids]
        if len(media) == 1:
            await response_message.answer_photo(media[0].media, caption=feedback_text)
        else:
            media[0].caption = feedback_text  # –¥–æ–±–∞–≤–∏–º –ø–æ–¥–ø–∏—Å—å –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–æ—Ç–æ
            await response_message.answer_media_group(media)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if video_id and not photo_ids:
        await response_message.answer_video(video_id, caption=feedback_text)
    await state.clear()


def register_NOX_handlers():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    router.callback_query.register(handle_nox_table_selection)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    router.callback_query.register(handle_nox_size_selected)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    router.message.register(handle_feedback_text_received)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    router.message.register(handle_photo_or_album)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    router.callback_query.register(handle_skip_video_step)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    router.message.register(handle_final_review_submission)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
