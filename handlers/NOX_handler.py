# -*- coding: utf-8 -*-
import asyncio
from collections import defaultdict

from aiogram import F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.types import InputMediaPhoto
from aiogram.types import InputMediaVideo  # –î–æ–±–∞–≤—å –≤ –∏–º–ø–æ—Ä—Ç—ã
from loguru import logger

from dispatcher import router, bot, ID_GROUP
from keyboards.NOX_keyboards import (selection_size_arbo_primo_table_keyboard_nox, TABLE_SIZES_NOX, keyboard_start_menu,
                                     keyboard_confirm_or_cancel)
from messages.messages import size_selection_text
from states.states import States

# –°–ª–æ–≤–∞—Ä—å –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–ª—å–±–æ–º–æ–≤
album_buffer = defaultdict(list)  # media_group_id -> List[Message]


# 1. –í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞
@router.callback_query(F.data == "nox_table")
async def handle_nox_table_selection(callback: CallbackQuery, state: FSMContext):
    """
    üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°—Ç–æ–ª ARBO NOX".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç–æ–ª–∞.
    """
    await callback.message.edit_text(size_selection_text, reply_markup=selection_size_arbo_primo_table_keyboard_nox())
    logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–°—Ç–æ–ª ARBO NOX'")
    await state.set_state(States.size)


# 2. –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞
@router.callback_query(StateFilter(States.size), F.data.in_(TABLE_SIZES_NOX.keys()))
async def handle_nox_size_selected(callback: CallbackQuery, state: FSMContext):
    """
    ‚úçÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤".
    –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞.
    """
    size_key = callback.data
    size_key = TABLE_SIZES_NOX.get(size_key)
    await state.update_data(size=size_key)
    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–∞–∑–º–µ—Ä {size_key}")
    msg = await callback.message.edit_text("üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ üëá", reply_markup=keyboard_start_menu())
    await state.update_data(last_bot_message_id=msg.message_id)
    await state.set_state(States.feedback)


# 3. –ü—Ä–∏–µ–º —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ
@router.message(StateFilter(States.feedback))
async def handle_feedback_text_received(message: Message, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–∑—ã–≤ –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ.
    """
    await state.update_data(feedback=message.text.strip())  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()
    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–∑—ã–≤ {message.text.strip()}")
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ (üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ üëá)
    data = await state.get_data()
    last_bot_message_id = data.get("last_bot_message_id")
    if last_bot_message_id:
        await message.bot.delete_message(chat_id=message.chat.id, message_id=last_bot_message_id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞
    msg = await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 10 —à—Ç—É–∫", reply_markup=keyboard_start_menu())
    await state.update_data(last_bot_message_id=msg.message_id)
    await state.set_state(States.photo_video)


# 3. –§–æ—Ç–æ –∏ –∞–ª—å–±–æ–º—ã
@router.message(StateFilter(States.photo_video), F.photo | F.video)
async def handle_media_group(message: Message, state: FSMContext):
    data = await state.get_data()
    feedback_text = data.get("feedback")
    table_size = data.get("size")

    text = (
        f"üì¶ –°—Ç–æ–ª: ARBO NOX\n"
        f"–†–∞–∑–º–µ—Ä: {table_size}\n"
        f"‚úçÔ∏è –û—Ç–∑—ã–≤: {feedback_text}\n"
    )

    # –ï—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å –∞–ª—å–±–æ–º–∞
    if message.media_group_id:
        album_buffer[message.media_group_id].append(message)
        await asyncio.sleep(1.5)

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ...")
        last_bot_message_id = data.get("last_bot_message_id")
        if last_bot_message_id:
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=last_bot_message_id)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")

        if album_buffer[message.media_group_id][-1].message_id == message.message_id:
            messages = album_buffer.pop(message.media_group_id)
            logger.info(f"üì∏üé• –ü–æ–ª—É—á–µ–Ω –∞–ª—å–±–æ–º ({len(messages)} –º–µ–¥–∏–∞) –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            photo_ids = []
            video_ids = []
            for msg in messages:
                await msg.delete()
                if msg.photo:
                    photo_ids.append(msg.photo[-1].file_id)
                elif msg.video:
                    video_ids.append(msg.video.file_id)
            await state.update_data(photo_ids=photo_ids, video_ids=video_ids, photo_response_sent=True)

            media_group = []
            for idx, pid in enumerate(photo_ids):
                media_group.append(InputMediaPhoto(media=pid, caption=text if idx == 0 else None))
            for idx, vid in enumerate(video_ids):
                media_group.append(
                    InputMediaVideo(media=vid, caption=text if not photo_ids and idx == 0 else None))
            if media_group:
                await message.answer_media_group(media_group)
            confirm_msg = await message.answer("üîé –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–∑—ã–≤ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π. –í—Å—ë –≤–µ—Ä–Ω–æ?",
                                               reply_markup=keyboard_confirm_or_cancel())
            await state.update_data(last_bot_message_id=confirm_msg.message_id)
            await state.set_state(States.sending)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –º–µ–¥–∏–∞
        if data.get("photo_response_sent"):
            return

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ...")
        last_bot_message_id = data.get("last_bot_message_id")
        if last_bot_message_id:
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=last_bot_message_id)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        last_bot_message_id = data.get("last_bot_message_id")
        if last_bot_message_id:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=last_bot_message_id)
        if message.photo:
            photo_id = message.photo[-1].file_id
            photo_ids = data.get("photo_ids", [])
            photo_ids.append(photo_id)
            await state.update_data(photo_ids=photo_ids, photo_response_sent=True)
            media = [InputMediaPhoto(media=photo_id, caption=text)]
            await message.answer_media_group(media)
        elif message.video:
            video_id = message.video.file_id
            video_ids = data.get("video_ids", [])
            video_ids.append(video_id)
            await state.update_data(video_ids=video_ids, photo_response_sent=True)
            await message.answer_video(video_id, caption=text)
        else:
            await message.answer(text)
        confirm_msg = await message.answer("üîé –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–∑—ã–≤ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π. –í—Å—ë –≤–µ—Ä–Ω–æ?",
                                           reply_markup=keyboard_confirm_or_cancel())
        await state.update_data(last_bot_message_id=confirm_msg.message_id)
        await state.set_state(States.sending)


@router.callback_query(F.data == "confirm_review")
async def handle_review_confirmation(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    table_size = data.get("size", "unknown")
    readable = TABLE_SIZES_NOX.get(table_size, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä")
    feedback_text = data.get("feedback", "")
    photo_ids = data.get("photo_ids", [])
    video_ids = data.get("video_ids", [])

    logger.success(f"‚úÖ [{callback.from_user.id}] –û—Ç–∑—ã–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")

    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    await send_review_to_user_and_admin(
        user_id=callback.from_user.id,
        message=callback.message,
        readable=readable,
        feedback_text=feedback_text,
        photo_ids=photo_ids,
        video_ids=video_ids,
        target_chat_id=ID_GROUP  # üëà –¥–æ–±–∞–≤–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä
    )

    await callback.message.answer("üéâ –°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é üëÄ", reply_markup=keyboard_start_menu())
    await state.clear()


# üì∏ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞
async def send_review_to_user_and_admin(user_id, message, readable, feedback_text, photo_ids, video_ids=None,
                                        target_chat_id=None):
    chat_id = target_chat_id or message.chat.id  # –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω, —à–ª—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    # 1. –¢–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –º–µ–¥–∏–∞
    await bot.send_message(
        chat_id=chat_id,
        text=f"üì© –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}!\n\nüì¶ –°—Ç–æ–ª: {readable}\n‚úçÔ∏è –û—Ç–∑—ã–≤:\n{feedback_text}",
    )

    # 2. –°–æ–±–∏—Ä–∞–µ–º –æ–±—â–∏–π –∞–ª—å–±–æ–º
    media_group = []
    if photo_ids:
        for idx, pid in enumerate(photo_ids):
            media_group.append(InputMediaPhoto(media=pid, caption=feedback_text if idx == 0 else None))

    if video_ids:
        for idx, vid in enumerate(video_ids):
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ –∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ ‚Äî –¥–æ–±–∞–≤–∏–º –ø–æ–¥–ø–∏—Å—å
            media_group.append(InputMediaVideo(media=vid, caption=feedback_text if not photo_ids and idx == 0 else None))

    # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º–æ–º (–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –µ—Å—Ç—å)
    if media_group:
        await bot.send_media_group(chat_id=chat_id, media=media_group)

    # 4. –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    if not media_group:
        await bot.send_message(chat_id=chat_id, text=f"‚úçÔ∏è –û—Ç–∑—ã–≤:\n{feedback_text}")


def register_NOX_handlers():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    router.callback_query.register(handle_nox_table_selection)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    router.callback_query.register(handle_nox_size_selected)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    router.message.register(handle_feedback_text_received)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    router.message.register(handle_media_group)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞

# 205
